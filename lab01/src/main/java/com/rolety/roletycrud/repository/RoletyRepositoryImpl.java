package com.rolety.roletycrud.repository;

import com.rolety.roletycrud.domain.Rolety;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

public class RoletyRepositoryImpl implements RoletyRepository {

    private Connection connection;
    private PreparedStatement getAllRoletysStmt;
    private PreparedStatement addRoletyStmt;

    public RoletyRepositoryImpl(Connection connection) throws SQLException{
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }
    
    private boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tablesExists = false;
            while (rs.next()) {
                if ("Rolety".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tablesExists = true;
                    break;
                }
            }
            return tablesExists;
        } catch (SQLException e) {
            return false;
        }
	}

	private void createTables() throws SQLException {
        connection.createStatement().executeUpdate(
            "CREATE TABLE "
            + "Rolety(id int GENERATED BY DEFAULT AS IDENTITY, " +
            "Name varchar(50) NOT NULL, " + "Price integer NOT NULL, " +
            "Size integer NOT NULL)");
	}

	@Override
	public Connection getConnection() {
		return connection;
	}

	@Override
	public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addRoletyStmt = connection.
        prepareStatement(
            "INSERT INTO Rolety (Name, Price, Size) VALUES (?, ?, ?)"
        );
        getAllRoletysStmt = connection.
        prepareStatement("SELECT Id, Name, Price, Size FROM Rolety"
        );
	}

	@Override
	public List<Rolety> getAll() {
        List<Rolety> roletys = new LinkedList<>();
        try {
            ResultSet rs = getAllRoletysStmt.executeQuery();

            while (rs.next()) {
                Rolety r = new Rolety();
                r.setId(rs.getInt("Id"));
                r.setName(rs.getString("Name"));
                r.setSize(rs.getInt("Size"));
                r.setPrice(rs.getInt("Price"));
                roletys.add(r);
            } 
        } catch (SQLException e) {
                throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
            }
            return roletys;
    }

	@Override
	public void initDatabase() {
		
	}

	@Override
	public Rolety getById(int id) {
		return null;
	}

	@Override
	public void addRolety(Rolety rolety) {
        int count = 0;
        try {
            addRoletyStmt.setString(1, rolety.getName());
            addRoletyStmt.setInt(2, rolety.getPrice());
            addRoletyStmt.setInt(3, rolety.getSize());
            count = addRoletyStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
	}

	@Override
	public void deleteRolety(Rolety rolety) {
		
	}

	@Override
	public void updateRolety(int oldId, Rolety newRolety) {
		
	}
}